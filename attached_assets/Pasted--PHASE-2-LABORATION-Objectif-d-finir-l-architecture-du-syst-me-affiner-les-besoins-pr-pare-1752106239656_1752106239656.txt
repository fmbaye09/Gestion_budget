üß± PHASE 2 ‚Äì √âLABORATION
Objectif : d√©finir l‚Äôarchitecture du syst√®me, affiner les besoins, pr√©parer le terrain pour le d√©veloppement technique.
________________________________________
‚úÖ 1. Objectifs de la phase
‚Ä¢	Consolider les besoins fonctionnels (au moins 80 % des cas d‚Äôutilisation)
‚Ä¢	D√©finir l‚Äôarchitecture logicielle
‚Ä¢	Pr√©ciser les r√¥les, interfaces, priorit√©s
‚Ä¢	Planifier la phase de construction
‚Ä¢	Valider la faisabilit√© technique
‚Ä¢	Identifier les composants critiques
________________________________________
üìå 2. Besoins fonctionnels d√©taill√©s
Code	Fonctionnalit√©	Description
F01	Saisie des besoins	L‚Äôutilisateur saisit les besoins budg√©taires (recettes/d√©penses) selon la nomenclature
F02	Acc√®s au budget pass√©	Permet de consulter les budgets pr√©c√©dents (propos√© et r√©alis√©)
F03	Calcul des √©carts	Calcul automatique des variations en valeur et en %
F04	Consolidation d√©partementale	Le chef de d√©partement fusionne les besoins de ses services
F05	Modification direction	Le directeur peut corriger ou ajuster les lignes budg√©taires
F06	G√©n√©ration automatique du projet de budget	Exporte le fichier final (Excel ou PDF)
F07	Tableau de bord des √©carts	Affiche clairement les manques/√©carts par service ou rubrique
________________________________________
üë• 3. R√¥les syst√®me + flux
R√¥le	Droits
Utilisateur simple	Saisie des besoins
Chef de d√©partement	Validation / Consolidation
Direction	R√©vision / √âdition finale
Comptable / Audit	Lecture / Analyse
D√©veloppeur	Acc√®s technique global
________________________________________
‚öôÔ∏è 4. Architecture technique propos√©e
üß± Architecture 3 couches
1.	Front-end (interface utilisateur)
o	Technologies : HTML, CSS, JavaScript, Bootstrap
o	Alternatives plus puissantes : Vue.js ou React
o	Interface responsive simple
2.	Back-end (logique m√©tier & API)
o	Framework : Python Flask ou Django
o	Fonctions : traitement des saisies, calcul des √©carts, g√©n√©ration de fichier, autorisations
3.	Base de donn√©es
o	PostgreSQL ou SQLite
o	Tables principales :
ÔÇß	users
ÔÇß	departments
ÔÇß	budget_lines
ÔÇß	budget_history
ÔÇß	roles
ÔÇß	rubriques_nomenclature
4.	Fichiers g√©n√©r√©s
o	Export Excel ou PDF
o	G√©n√©ration avec openpyxl ou pandas c√¥t√© back-end
________________________________________
üóÇÔ∏è 5. Mod√®le de donn√©es simplifi√©
Table budget_lines
id
department_id
rubrique_code
rubrique_label
type (recette/d√©pense)
montant_propose
montant_realise
ann√©e
user_id
Table users
id
nom
email
mot_de_passe
role_id
Table roles
id
nom (utilisateur, chef, directeur, etc.)
Table rubriques_nomenclature
code
libell√©
type (recette/d√©pense)
________________________________________
üìÖ 6. Planification indicative de la phase suivante (Construction)
√âtape	Dur√©e estim√©e	Livrable attendu
Cr√©ation de la base de donn√©es	2 jours	Mod√®le de donn√©es fonctionnel
D√©veloppement de l‚Äôinterface de saisie	3-5 jours	Formulaire connect√©
Gestion des profils utilisateurs	2 jours	Authentification, r√¥les
Calcul automatique des √©carts	1 jour	Vue des r√©sultats
G√©n√©ration du fichier final	2 jours	Fichier Excel / PDF
Tableau de bord direction	2 jours	Vue globale, √©carts, statistiques
________________________________________
üì§ 7. Livrables √† produire dans cette phase
‚Ä¢	Diagramme de classes UML üìò 
‚Ä¶ (√† faire)
‚Ä¢	Maquette des interfaces üé®
 
 
 
 
 
 
‚Ä¢	Mod√®le de donn√©es (format SQL)
 
‚Ä¢	Sp√©cifications techniques d√©taill√©es
Composant	Technologie possible
Frontend	HTML/CSS/Bootstrap + JS (ou React)
Backend	Python (Flask ou Django)
Base de donn√©es	PostgreSQL ou SQLite
Export	openpyxl, reportlab (PDF)
Authentification	JWT ou sessions classiques

‚Ä¢	Cas d‚Äôutilisation UML (avec acteurs et flux)
‚Ä¶ (√† dessiner)

